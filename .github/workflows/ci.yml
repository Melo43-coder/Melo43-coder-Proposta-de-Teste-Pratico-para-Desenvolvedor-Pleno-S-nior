name: Customer Service CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      # Serviço MongoDB para testes
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({serverStatus:1}).ok' | mongosh --quiet | grep 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Serviço Redis para testes
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint || echo "Linting skipped"

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test
        env:
          MONGODB_URI: mongodb://localhost:27017/customer-service-test
          REDIS_URI: redis://localhost:6379
          USE_MOCK_KAFKA: 'true'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-service:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/customer-service:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/customer-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/customer-service:buildcache,mode=max

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Deploy to production
        run: echo "Deploy step would go here - using Docker image ${{ secrets.DOCKER_HUB_USERNAME }}/customer-service:${{ github.sha }}"
        # Na prática, você usaria uma action específica para seu ambiente de deploy
        # Por exemplo:
        # - AWS: aws-actions/amazon-ecs-deploy-task-definition
        # - Azure: Azure/webapps-deploy
        # - GCP: google-github-actions/deploy-cloudrun
        # - Kubernetes: steebchen/kubectl